/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { precacheAndRoute } from "workbox-precaching";
import { Channels } from "./infra";
import { PlayerService } from "./player";
import { ROOM_STATE_CHANGED, RoomService } from "./room";
import { GAME_STATE_CHANGED, GameService } from "./game";
import { Constants } from "./common";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Any other custom service worker logic can go here.

Channels.stateEventsListener.on(GAME_STATE_CHANGED, console.log);
Channels.stateEventsListener.on(Constants.PLAYER_STATE_CHANGED, console.log);
Channels.stateEventsListener.on(ROOM_STATE_CHANGED, console.log);

const playerService = new PlayerService(
  Channels.tasksPublisher,
  Channels.tasksListener,
  Channels.stateEventsPublisher
);
const gameService = new GameService(
  Channels.tasksPublisher,
  Channels.tasksListener,
  Channels.stateEventsPublisher
);
const roomService = new RoomService(
  Channels.tasksPublisher,
  Channels.tasksListener,
  Channels.stateEventsPublisher,
  gameService
);
